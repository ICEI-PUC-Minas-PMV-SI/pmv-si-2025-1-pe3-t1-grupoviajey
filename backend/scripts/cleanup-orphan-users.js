// Script para limpar usu√°rios √≥rf√£os do Firebase Auth
// Usu√°rios que existem no Auth mas n√£o t√™m perfil no Firestore

const admin = require('firebase-admin');
const path = require('path');

// Configurar Firebase Admin
const serviceAccount = require(path.resolve(__dirname, '../src/config/credencialFirebase.json'));

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
}

const db = admin.firestore();

async function cleanupOrphanUsers() {
  try {
    console.log('üîç Iniciando busca por usu√°rios √≥rf√£os...');
    
    // Listar todos os usu√°rios do Firebase Auth
    const listUsersResult = await admin.auth().listUsers();
    const authUsers = listUsersResult.users;
    
    console.log(`üìä Total de usu√°rios no Auth: ${authUsers.length}`);
    
    const orphanUsers = [];
    const validUsers = [];
    
    // Verificar cada usu√°rio do Auth no Firestore
    for (const authUser of authUsers) {
      const userRef = db.collection('users').doc(authUser.uid);
      const doc = await userRef.get();
      
      if (!doc.exists) {
        orphanUsers.push({
          uid: authUser.uid,
          email: authUser.email,
          displayName: authUser.displayName,
          createdAt: authUser.metadata.creationTime,
          lastSignInTime: authUser.metadata.lastSignInTime
        });
      } else {
        validUsers.push({
          uid: authUser.uid,
          email: authUser.email
        });
      }
    }
    
    console.log(`‚úÖ Usu√°rios v√°lidos: ${validUsers.length}`);
    console.log(`‚ùå Usu√°rios √≥rf√£os encontrados: ${orphanUsers.length}`);
    
    if (orphanUsers.length === 0) {
      console.log('üéâ Nenhum usu√°rio √≥rf√£o encontrado!');
      return;
    }
    
    // Mostrar usu√°rios √≥rf√£os
    console.log('\nüìã Usu√°rios √≥rf√£os:');
    orphanUsers.forEach((user, index) => {
      console.log(`${index + 1}. UID: ${user.uid}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   Nome: ${user.displayName || 'N/A'}`);
      console.log(`   Criado em: ${user.createdAt}`);
      console.log(`   √öltimo login: ${user.lastSignInTime}`);
      console.log('');
    });
    
    // Perguntar se deve deletar (simular confirma√ß√£o)
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° deletar permanentemente os usu√°rios √≥rf√£os do Firebase Auth!');
    console.log('üí° Para executar a limpeza, descomente as linhas de c√≥digo no final deste script.');
    
    // DESCOMENTE AS LINHAS ABAIXO PARA EXECUTAR A LIMPEZA
    console.log('\nüóëÔ∏è  Iniciando limpeza...');
    
    for (const orphanUser of orphanUsers) {
      try {
        await admin.auth().deleteUser(orphanUser.uid);
        console.log(`‚úÖ Usu√°rio deletado: ${orphanUser.email} (${orphanUser.uid})`);
      } catch (error) {
        console.error(`‚ùå Erro ao deletar usu√°rio ${orphanUser.email}:`, error.message);
      }
    }
    
    console.log('\nüéâ Limpeza conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error);
  }
}

// Executar o script
cleanupOrphanUsers()
  .then(() => {
    console.log('‚úÖ Script conclu√≠do');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erro no script:', error);
    process.exit(1);
  }); 